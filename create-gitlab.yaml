heat_template_version: 2016-10-14

parameters:
  flavor:
    type: string
  image_server: 
    type: string
  image_manager: 
    type: string
  keyPair_name:
    type: string
    description: Name of the keypair generated in OpenStack for SSH authentication
    default: openStackKeyPair
    constraints:
      - length: { min: 1}
        description: Check if value is null or not
  public_internet:
    type: string
    description: Name of the network connected to internett
    default: ntnu-internal  
  stack_name:
    type: string
    description: Name of the stack to be created

resources:
  web_secgroup:
      type: OS::Neutron::SecurityGroup
      properties:
        rules:
          - protocol: tcp
            port_range_min: 22
            port_range_max: 22
          - protocol: icmp
          - protocol: tcp
            port_range_min: 80
            port_range_max: 80

  internal_net:
      type: OS::Neutron::Net

  internal_subnet:
      type: OS::Neutron::Subnet
      properties:
        network_id: { get_resource: internal_net }
        cidr: "10.8.1.0/24"
        dns_nameservers: [ "8.8.8.8", "8.8.4.4" ]
        ip_version: 4

  internal_router:
      type: OS::Neutron::Router
      properties:
        external_gateway_info: { network: {get_param: public_internet } }

  internal_interface:
      type: OS::Neutron::RouterInterface
      properties:
        router_id: { get_resource: internal_router }
        subnet: { get_resource: internal_subnet }

  instance_port:
      type: OS::Neutron::Port
      properties:
        network: { get_resource: internal_net }
        security_groups:
          - default
          - { get_resource: web_secgroup }
  
  floating_ip:
      type: OS::Neutron::FloatingIP
      properties:
        floating_network: { get_param: public_internet }
        port_id: { get_resource: instance_port }

  manager:
      type: OS::Nova::Server
      properties:
        flavor: { get_param: flavor }
        image: { get_param: image_manager }
        key_name: { get_param: keyPair_name }
        user_data_format: RAW
        user_data: |
          #!/bin/bash -v
          managerIP=$(hostname -I | awk '{print $1}')
          #Oppstart script på alle maskiner for å installere puppet agent 
          wget https://apt.puppetlabs.com/puppet6-release-bionic.deb
          sudo dpkg -i puppet6-release-bionic.deb
          sudo apt-get update
          sudo apt-get install puppet-agent

          # add Puppet binaries to PATH:
          echo 'export PATH=$PATH:/opt/puppetlabs/bin/' >> ~/.bashrc

          # source .bashrc to apply:
          source ~/.bashrc

          #Set riktig tidssone på alle servere
          puppet module install puppetlabs-ntp
          puppet module install saz-timezone

          #last ned modulene for å installere gitlab og postgres
          puppet module install puppetlabs-postgresql
          puppet module install puppet-gitlab
          
          echo "# time.pp:
          node default {
            include ntp
            class { 'timezone':
              timezone => 'Europe/Oslo',
            }
          }" >> ~/time.pp

          echo "class { 'postgresql::globals':
            manage_package_repo => true,
            version             => '12',
          }

          class { 'postgresql::server':
            listen_addresses           => '*',
            postgres_password          => 'password',
          }

          postgresql::server::db { 'gitlabhq_production':
            user     => 'manager',
            password => postgresql::postgresql_password('manager', 'password'),
          }

          postgresql::server::role { 'manager':
            password_hash => postgresql::postgresql_password('manager', 'password'),
            superuser => true;
          }

          postgresql::server::database_grant { 'gitlabhq_production':
            privilege => 'ALL',
            db        => 'gitlabhq_production',
            role      => 'manager',
          }

          postgresql::server::pg_hba_rule { 'allow application network to access app database':
            description => 'Open up PostgreSQL for access from anyone',
            type        => 'host',
            database    => 'all',
            user        => 'all',
            address     => '0.0.0.0/0',
            auth_method => 'md5',
          }" >> ~/postgres.pp

          echo "class { 'gitlab':
            gitlab_rails => {
              'db_adapter' => "postgresql",
              'db_encoding' => "unicode",
              'db_username' => "manager",
              'db_password' => "password",
              'db_host' => '$managerIP',
              'db_port' => 5432,
            },
            logging      => {
              'svlogd_size' => '200 * 1024 * 1024',
            },
          }" >> ~/gitlab.pp

          
          puppet apply ~/time.pp
          puppet apply ~/postgres.pp
          puppet apply ~/gitlab.pp
        networks:
          - port: { get_resource: instance_port }
  
  association:
      type: OS::Neutron::FloatingIPAssociation
      properties:
        floatingip_id: { get_resource: floating_ip }
        port_id: { get_resource: instance_port }

  asg:
    type: OS::Heat::AutoScalingGroup
    properties:
      min_size: 1
      max_size: 3
      resource:
        type: gitlab-agent.yaml
        properties:
          flavor: {get_param: flavor}
          image: {get_param: image_server}
          key_name: {get_param: keyPair_name}
          network: {get_resource: internal_net}
          subnet: {get_resource: internal_subnet}
          pool_id: {get_resource: pool_web}
          metadata: {"metering.server_group": {get_param: "OS::stack_id"}}
          user_data:
            str_replace:
              template: |
                #!/bin/bash -v
                #Oppstart script på alle maskiner for å installere puppet agent 
                wget https://apt.puppetlabs.com/puppet6-release-bionic.deb
                sudo dpkg -i puppet6-release-bionic.deb
                sudo apt-get update
                sudo apt-get install puppet-agent

                # add Puppet binaries to PATH:
                echo 'export PATH=$PATH:/opt/puppetlabs/bin/' >> ~/.bashrc

                # source .bashrc to apply:
                source ~/.bashrc

                #Set riktig tidssone på alle servere
                puppet module install puppetlabs-ntp
                puppet module install saz-timezone
                
                #last ned modulene for å installere gitlab
                puppet module install puppet-gitlab
               
                echo "# time.pp:
                node default {
                  include ntp
                  class { 'timezone':
                    timezone => 'Europe/Oslo',
                  }
                }" >> ~/time.pp

                echo "class { 'gitlab':
                  gitlab_rails => {
                    'db_adapter' => "postgresql",
                    'db_encoding' => "unicode",
                    'db_username' => "manager",
                    'db_password' => "password",
                    'db_host' => '$managerIP',
                    'db_port' => 5432,
                  },
                  logging      => {
                    'svlogd_size' => '200 * 1024 * 1024',
                  },
                }" >> ~/gitlab.pp

                #Kjør puppet kode
                puppet apply ~/time.pp
                puppet apply ~/gitlab.pp
              params:
                $managerIP: { get_attr: [ manager, first_address ] }
            
  pool_web:
    type: OS::Octavia::Pool
    properties:
      listener: {get_resource: listener}
      lb_algorithm: ROUND_ROBIN
      protocol: HTTP
      session_persistence:
        type: SOURCE_IP
  listener:
    type: OS::Octavia::Listener
    properties:
      loadbalancer: {get_resource: lb}
      protocol: HTTP
      protocol_port: 80
  lb:
    type: OS::Octavia::LoadBalancer
    properties:
      vip_subnet: {get_resource: internal_subnet}
  lb_monitor:
    type: OS::Octavia::HealthMonitor
    properties:
      pool: { get_resource: pool_web }
      type: TCP
      delay: 5
      max_retries: 5
      timeout: 5
  lb_floating:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: {get_param: public_internet}
      port_id: {get_attr: [lb, vip_port_id]}

  web_server_scaleup_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: asg}
      cooldown: 60
      scaling_adjustment: 1
  web_server_scaledown_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: asg}
      cooldown: 60
      scaling_adjustment: -1

 

outputs:
  scale_up_url:
    value: {get_attr: [web_server_scaleup_policy, alarm_url]}
    description: >
      This URL is the webhook to scale up the autoscaling group.  You
      can invoke the scale-up operation by doing an HTTP POST to this
      URL; no body nor extra headers are needed.
  
  scale_dn_url:
    value: {get_attr: [web_server_scaledown_policy, alarm_url]}
    description: >
      This URL is the webhook to scale down the autoscaling group.
      You can invoke the scale-down operation by doing an HTTP POST to
      this URL; no body nor extra headers are needed.
  
  pool_ip_address:
    value: {get_attr: [lb, vip_address]}
    description: The IP address of the load balancing pool
  
  website_url:
    value:
      str_replace:
        template: http://host/
        params:
          host: { get_attr: [lb_floating, floating_ip_address] }
    description: >
      This URL is the "external" URL that can be used to access instance
  
  manager_floatIp:
    value: { get_attr: [ floating_ip, floating_ip_address ] }
    description: Floating IP address of instance
